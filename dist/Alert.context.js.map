{"version":3,"file":"Alert.context.js","sourceRoot":"","sources":["../src/Alert.context.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, {\n  createContext,\n  ReactNode,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n} from 'react';\nimport {AlertView} from './Alert.view';\nimport uuid from 'surfinn-uuid';\n\ntype TAlertId = string;\n\nexport interface IAlertState {\n  id?: TAlertId;\n  show?: boolean;\n  backdrop?: boolean;\n  backdropOpacity?: number;\n  children: ReactNode;\n}\n\nconst initialAlerts: IAlertState[] = [];\n\nconst reducer = (state: any, action: any) => {\n  let alert = null;\n  switch (action.type) {\n    case 'ADD':\n      return [\n        ...state,\n        {\n          id: action.id,\n          show: false,\n          children: action.children,\n          backdrop: action.backdrop,\n          backdropOpacity: action.backdropOpacity,\n        },\n      ];\n\n    case 'REMOVE':\n      return state.filter((_alert: IAlertState) => _alert.id !== action.id);\n\n    case 'OPEN':\n      alert = state.find((_alert: IAlertState) => _alert.id === action.id);\n      if (alert) {\n        return [\n          ...state.filter((_alert: IAlertState) => _alert.id !== action.id),\n          {\n            // @ts-ignore\n            ...alert,\n            show: true,\n          },\n        ];\n      } else {\n        return state;\n      }\n\n    case 'CLOSE':\n      alert = state.find((_alert: IAlertState) => _alert.id === action.id);\n      if (alert) {\n        return [\n          ...state.filter((_alert: IAlertState) => _alert.id !== action.id),\n          {\n            // @ts-ignore\n            ...alert,\n            show: false,\n          },\n        ];\n      } else {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport interface IAlertContext {\n  add: (state: IAlertState) => string;\n  remove: (id: string) => void;\n  open: (id: string) => void;\n  close: (id: string) => void;\n}\n\nexport const AlertContext = createContext<IAlertContext | null>(null);\n\nexport const useAlert = () => useContext(AlertContext);\n\nexport interface IAlertProviderProps {\n  children: ReactNode;\n}\n\nexport const AlertProvider = ({children}: IAlertProviderProps) => {\n  const [alerts, dispatch] = useReducer(reducer, initialAlerts);\n\n  const add = useCallback((state: IAlertState) => {\n    console.log('Alert.context add', state);\n    const id = uuid.v4();\n    dispatch({type: 'ADD', ...state, id});\n    return id;\n  }, []);\n\n  const remove = useCallback((id: string) => {\n    dispatch({type: 'REMOVE', id});\n  }, []);\n\n  const open = useCallback((id: string) => {\n    dispatch({type: 'OPEN', id});\n  }, []);\n\n  const close = useCallback((id: string) => {\n    dispatch({type: 'CLOSE', id});\n  }, []);\n\n  const context: IAlertContext = useMemo(\n    () => ({\n      add,\n      remove,\n      open,\n      close,\n    }),\n    [add, remove, open, close],\n  );\n  return (\n    <AlertContext.Provider value={context}>\n      {children}\n      {alerts\n        .filter((alert: IAlertState) => alert.show)\n        .map((alert: IAlertState) => {\n          return (\n            <AlertView\n              key={alert.id}\n              backdrop={alert.backdrop}\n              backdropOpacity={alert.backdropOpacity}>\n              {alert.children}\n            </AlertView>\n          );\n        })}\n    </AlertContext.Provider>\n  );\n};\n"]}